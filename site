<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Fazenda Incerpi - Login & Sistema Interno</title>
  <style>
    /* Reset */
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background-color: #ffffff;
      color: #000000;
      line-height: 1.6;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      justify-content: flex-start;
      padding: 2rem;
    }

    a {
      color: inherit;
      text-decoration: none;
      cursor: pointer;
    }

    h1, h2, h3 {
      color: #008000;
      font-weight: 700;
      user-select: none;
    }

    /* Login Form */
    #login-form {
      max-width: 400px;
      margin: 0 auto 3rem;
      background: white;
      border-radius: 10px;
      box-shadow: 0 8px 20px #ccc;
      padding: 1.5rem 2rem;
      display: flex;
      flex-direction: column;
      gap: 1rem;
      user-select: text;
    }

    #login-form h2 {
      margin-bottom: 1rem;
      text-align: center;
    }

    #login-form label {
      font-weight: 600;
      margin-bottom: 0.25rem;
      display: block;
      color: #333;
    }

    #login-form input {
      border: 2px solid #ccc;
      border-radius: 6px;
      padding: 0.5rem;
      font-size: 1rem;
      transition: border-color 0.3s ease;
      width: 100%;
    }

    #login-form input:focus {
      outline: none;
      border-color: #D2691E;
      box-shadow: 0 0 6px #D2691Eaa;
    }

    #login-form button {
      background-color: #D2691E;
      color: white;
      border: none;
      padding: 0.75rem;
      border-radius: 8px;
      font-size: 1.1rem;
      font-weight: 700;
      cursor: pointer;
      transition: background-color 0.3s ease;
      margin-top: 1rem;
    }

    #login-form button:hover,
    #login-form button:focus {
      background-color: #a35311;
      outline: none;
    }

    #login-error {
      color: #D2691E;
      font-weight: 700;
      text-align: center;
      font-size: 0.9rem;
      display: none;
    }

    /* Sistema Interno Main Panel */
    #system-panel {
      display: none;
      max-width: 1000px;
      margin: 0 auto;
      user-select: text;
    }

    #system-panel.active {
      display: block;
    }

    /* Sistema: Tarefas */
    #task-form {
      background: white;
      padding: 1rem 1.5rem;
      border-radius: 12px;
      box-shadow: 0 6px 15px #ccc;
      max-width: 600px;
      margin: 0 auto 2rem;
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }

    #task-form h3 {
      text-align: center;
      margin-bottom: 1rem;
    }

    #task-form label {
      font-weight: 600;
      margin-bottom: 0.25rem;
      color: #333;
    }

    #task-form input,
    #task-form select,
    #task-form textarea {
      border: 2px solid #ccc;
      border-radius: 8px;
      padding: 0.5rem;
      font-size: 1rem;
      width: 100%;
      resize: vertical;
      transition: border-color 0.3s ease;
    }

    #task-form input:focus,
    #task-form select:focus,
    #task-form textarea:focus {
      outline: none;
      border-color: #D2691E;
      box-shadow: 0 0 6px #D2691Eaa;
    }

    #task-form button {
      align-self: center;
      margin-top: 1rem;
      background-color: #008000;
      color: white;
      border: none;
      padding: 0.75rem 1.5rem;
      border-radius: 8px;
      font-weight: 700;
      cursor: pointer;
      transition: background-color 0.3s ease;
    }

    #task-form button:hover,
    #task-form button:focus {
      background-color: #005000;
      outline: none;
    }

    /* Lista de Tarefas */
    #task-list {
      background: white;
      border-radius: 12px;
      box-shadow: 0 6px 15px #ccc;
      padding: 1rem 2rem;
      user-select: text;
      max-width: 1000px;
      margin: 0 auto 2rem;
    }

    #task-list h3 {
      color: #D2691E;
      font-weight: 700;
      margin-bottom: 1rem;
      text-align: center;
    }

    table {
      width: 100%;
      border-collapse: collapse;
      font-size: 0.9rem;
    }

    thead {
      background: #008000;
      color: white;
      user-select: none;
    }

    th, td {
      padding: 0.65rem 0.8rem;
      border: 1px solid #ccc;
      text-align: left;
      vertical-align: middle;
    }

    tbody tr:nth-child(even) {
      background-color: #f9f9f9;
    }

    tbody tr:hover {
      background-color: #D8E8D8;
    }

    /* Quadras (mapa simplificado) */
    #plots-map {
      max-width: 900px;
      margin: 2rem auto;
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
      gap: 1rem;
      user-select: none;
    }

    .plot {
      padding: 1.25rem;
      border-radius: 12px;
      color: white;
      font-weight: 700;
      font-size: 1.15rem;
      text-align: center;
      cursor: pointer;
      box-shadow: 0 6px 12px #bbb;
      transition: background-color 0.4s ease, transform 0.3s ease;
      user-select: none;
      outline-offset: 2px;
    }

    .plot.gray {
      background-color: #DCDCDC;
      color: #555;
      box-shadow: 0 6px 12px #bbb inset;
    }

    .plot.orange {
      background-color: #D2691E;
    }

    .plot.green {
      background-color: #008000;
    }

    .plot:hover,
    .plot:focus {
      transform: scale(1.05);
      outline: 2px solid #D2691E;
      outline-offset: 4px;
    }

    /* Progress Update Modal */
    #progress-modal {
      position: fixed;
      top: 0; left: 0; right: 0; bottom: 0;
      background: rgba(0,0,0,0.5);
      display: none;
      justify-content: center;
      align-items: center;
      z-index: 2000;
      user-select: none;
    }

    #progress-modal.active {
      display: flex;
    }

    #progress-modal-content {
      background: white;
      border-radius: 10px;
      padding: 1.5rem 2rem;
      max-width: 400px;
      width: 90%;
      box-shadow: 0 8px 24px #333a;
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }

    #progress-modal-content h3 {
      color: #008000;
      margin-bottom: 1rem;
      text-align: center;
    }

    #progress-modal-content label {
      font-weight: 600;
      color: #333;
    }

    #progress-modal-content select,
    #progress-modal-content input {
      border: 2px solid #ccc;
      border-radius: 6px;
      padding: 0.5rem;
      font-size: 1rem;
      width: 100%;
      transition: border-color 0.3s ease;
    }

    #progress-modal-content select:focus,
    #progress-modal-content input:focus {
      outline: none;
      border-color: #D2691E;
      box-shadow: 0 0 6px #D2691Eaa;
    }

    #progress-modal-buttons {
      display: flex;
      justify-content: space-between;
      gap: 1rem;
      margin-top: 1rem;
    }

    #progress-modal-buttons button {
      flex: 1;
      padding: 0.5rem 0;
      border-radius: 8px;
      font-weight: 700;
      border: none;
      cursor: pointer;
      transition: background-color 0.3s ease;
    }

    #progress-save-button {
      background-color: #008000;
      color: white;
    }

    #progress-save-button:hover,
    #progress-save-button:focus {
      background-color: #005000;
      outline: none;
    }

    #progress-cancel-button {
      background-color: #ccc;
      color: #555;
    }

    #progress-cancel-button:hover,
    #progress-cancel-button:focus {
      background-color: #999;
      outline: none;
    }
  </style>
</head>
<body>

  <h1>Login - Fazenda Incerpi</h1>

  <form id="login-form" aria-label="Formulário de login para funcionários" novalidate>
    <label for="username">Usuário</label>
    <input id="username" name="username" type="text" required autocomplete="username" aria-required="true" />
    <label for="password">Senha</label>
    <input id="password" name="password" type="password" required autocomplete="current-password" aria-required="true" />
    <button type="submit">Entrar</button>
    <p id="login-error" role="alert" aria-live="assertive"></p>
  </form>

  <div id="system-panel" aria-live="polite" tabindex="0">
    <h2>Sistema Interno - Gerenciamento de Tarefas</h2>

    <form id="task-form" aria-label="Cadastro de tarefas na fazenda" novalidate>
      <h3>Cadastro de Tarefas</h3>
      <label for="task-type">Tipo de Tarefa</label>
      <select id="task-type" name="taskType" required aria-required="true">
        <option value="" disabled selected>Selecione</option>
        <option value="desbrota">Desbrota</option>
        <option value="pulverizacao">Pulverização</option>
        <option value="colheita">Colheita</option>
        <option value="irrigacao">Irrigação</option>
      </select>
      <label for="task-plot">Quadra</label>
      <select id="task-plot" name="taskPlot" required aria-required="true"></select>
      <label for="task-responsible">Responsável</label>
      <input id="task-responsible" name="taskResponsible" type="text" required aria-required="true" placeholder="Nome do responsável" />
      <label for="task-deadline">Prazo</label>
      <input id="task-deadline" name="taskDeadline" type="date" required aria-required="true" />
      <label for="task-note">Observações</label>
      <textarea id="task-note" name="taskNote" rows="3" placeholder="Adicione observações (opcional)"></textarea>
      <button type="submit">Salvar Tarefa</button>
    </form>

    <section id="task-list" aria-label="Lista de tarefas cadastradas">
      <h3>Tarefas</h3>
      <table aria-describedby="task-list-desc">
        <caption id="task-list-desc">Lista de tarefas cadastradas nas quadras.</caption>
        <thead>
          <tr>
            <th scope="col">Tipo</th>
            <th scope="col">Quadra</th>
            <th scope="col">Responsável</th>
            <th scope="col">Prazo</th>
            <th scope="col">Observações</th>
            <th scope="col">Progresso (%)</th>
            <th scope="col">Ações</th>
          </tr>
        </thead>
        <tbody id="tasks-tbody"></tbody>
      </table>
    </section>

    <section id="plots-section" aria-label="Mapa das quadras com progresso">
      <h3>Visualização das Quadras</h3>
      <div id="plots-map" role="list" aria-live="polite" aria-relevant="additions removals"></div>
    </section>
  </div>

  <!-- Modal Atualização de Progresso -->
  <div id="progress-modal" role="dialog" aria-modal="true" aria-labelledby="progress-modal-title" aria-hidden="true">
    <div id="progress-modal-content">
      <h3 id="progress-modal-title">Atualizar Progresso da Quadra</h3>
      <form id="progress-form" novalidate>
        <label for="progress-select">Progresso (%)</label>
        <select id="progress-select" required>
          <option value="" disabled selected>Selecione o progresso</option>
          <option value="0">0%</option>
          <option value="50">50%</option>
          <option value="100">100%</option>
        </select>
        <label for="progress-username">Usuário</label>
        <input id="progress-username" type="text" readonly />
        <label for="progress-date">Data</label>
        <input id="progress-date" type="text" readonly />
        <div id="progress-modal-buttons">
          <button type="submit" id="progress-save-button">Salvar</button>
          <button type="button" id="progress-cancel-button">Cancelar</button>
        </div>
      </form>
    </div>
  </div>

<script>
  (() => {
    "use strict";
    /* Área Restrita - Usuários */
    const users = [
      { username: 'ADM', password: '123@123.com', role: 'Administrador' },
      { username: 'EduardoIncerpi', password: '101878', role: 'Supervisor' },
      { username: 'EllenIncerpi', password: '101823', role: 'Supervisor' },
      { username: 'EdsonIncerpi', password: '07187', role: 'Supervisor' },
      { username: 'Colaborador 1', password: '123', role: 'Colaborador' },
      { username: 'Colaborador 2', password: '123', role: 'Colaborador' }
    ];

    const STORAGE_KEY_TASKS = 'incerpi_tasks';
    let currentUser = null;
    let tasks = [];

    const loginForm = document.getElementById('login-form');
    const loginError = document.getElementById('login-error');
    const systemPanel = document.getElementById('system-panel');
    const taskForm = document.getElementById('task-form');
    const tasksTbody = document.getElementById('tasks-tbody');
    const taskPlotSelect = document.getElementById('task-plot');
    const plotsMap = document.getElementById('plots-map');
    const progressModal = document.getElementById('progress-modal');
    const progressForm = document.getElementById('progress-form');
    const progressSelect = document.getElementById('progress-select');
    const progressUsername = document.getElementById('progress-username');
    const progressDate = document.getElementById('progress-date');
    const progressCancelButton = document.getElementById('progress-cancel-button');

    const plots = [
      { id: 'Q1', name: 'Quadra 1', progress: 0 },
      { id: 'Q2', name: 'Quadra 2', progress: 50 },
      { id: 'Q3', name: 'Quadra 3', progress: 100 },
      { id: 'Q4', name: 'Quadra 4', progress: 0 },
      { id: 'Q5', name: 'Quadra 5', progress: 50 },
      { id: 'Q6', name: 'Quadra 6', progress: 100 }
    ];

    function populatePlotOptions() {
      taskPlotSelect.innerHTML = '<option value="" disabled selected>Selecione a quadra</option>';
      plots.forEach(plot => {
        const option = document.createElement('option');
        option.value = plot.id;
        option.textContent = plot.name;
        taskPlotSelect.appendChild(option);
      });
    }

    function renderPlots() {
      plotsMap.innerHTML = '';
      plots.forEach(plot => {
        const div = document.createElement('div');
        div.classList.add('plot');
        if (plot.progress === 0) div.classList.add('gray');
        else if (plot.progress === 50) div.classList.add('orange');
        else if (plot.progress === 100) div.classList.add('green');
        div.textContent = plot.name;
        div.tabIndex = 0;
        div.setAttribute('role', 'listitem');
        div.setAttribute('aria-label', `${plot.name}, progresso ${plot.progress} por cento.`);
        div.dataset.plotId = plot.id;
        div.addEventListener('click', () => openProgressModal(plot.id));
        div.addEventListener('keypress', (e) => { if (e.key === 'Enter') openProgressModal(plot.id); });
        plotsMap.appendChild(div);
      });
    }

    function saveTasks() {
      localStorage.setItem(STORAGE_KEY_TASKS, JSON.stringify(tasks));
    }

    function loadTasks() {
      const stored = localStorage.getItem(STORAGE_KEY_TASKS);
      if (stored) tasks = JSON.parse(stored);
      else tasks = [];
    }

    function renderTasks() {
      tasksTbody.innerHTML = '';
      tasks.forEach((task, index) => {
        const tr = document.createElement('tr');
        tr.tabIndex = 0;

        tr.innerHTML = `
          <td>${task.type}</td>
          <td>${task.plotName}</td>
          <td>${task.responsible}</td>
          <td>${task.deadline}</td>
          <td>${task.note || '-'}</td>
          <td>${task.progress}%</td>
          <td>
            ${canEdit() ? `<button type="button" aria-label="Editar tarefa ${task.type}" data-index="${index}" class="edit-task">Editar</button>` : ''}
            ${canEdit() || isAdmin() ? `<button type="button" aria-label="Excluir tarefa ${task.type}" data-index="${index}" class="delete-task">Excluir</button>`: ''}
          </td>
        `;
        tasksTbody.appendChild(tr);
      });

      document.querySelectorAll('.delete-task').forEach(btn => {
        btn.addEventListener('click', e => {
          const index = +e.target.dataset.index;
          if (confirm(`Confirmar exclusão da tarefa: ${tasks[index].type} ?`)) {
            tasks.splice(index, 1);
            saveTasks();
            renderTasks();
            updatePlotsProgress();
          }
        });
      });

      document.querySelectorAll('.edit-task').forEach(btn => {
        btn.addEventListener('click', e => {
          const index = +e.target.dataset.index;
          populateFormForEdit(index);
        });
      });
    }

    function populateFormForEdit(index) {
      if (!canEdit()) return;
      const t = tasks[index];
      taskForm.taskType.value = t.type;
      taskForm.taskPlot.value = t.plotId;
      taskForm.taskResponsible.value = t.responsible;
      taskForm.taskDeadline.value = t.deadline;
      taskForm.taskNote.value = t.note || '';
      taskForm.dataset.editIndex = index;
      taskForm.querySelector('button[type=submit]').textContent = 'Atualizar Tarefa';
      taskForm.scrollIntoView({behavior: 'smooth'});
    }

    function canEdit() {
      return currentUser && (currentUser.role === 'Administrador' || currentUser.role === 'Supervisor');
    }

    function isAdmin() {
      return currentUser && currentUser.role === 'Administrador';
    }

    function clearTaskForm() {
      taskForm.reset();
      delete taskForm.dataset.editIndex;
      taskForm.querySelector('button[type=submit]').textContent = 'Salvar Tarefa';
    }

    function updatePlotsProgress() {
      plots.forEach(p => p.progress = 0);
      tasks.forEach(t => {
        const plot = plots.find(p => p.id === t.plotId);
        if (plot) {
          if (t.progress > plot.progress) plot.progress = t.progress;
        }
      });
      renderPlots();
    }

    let activePlotId = null;
    function openProgressModal(plotId) {
      activePlotId = plotId;
      const plot = plots.find(p => p.id === plotId);
      if (!plot) return;
      progressSelect.value = plot.progress.toString();
      progressUsername.value = currentUser.username;
      progressDate.value = new Date().toLocaleString();
      progressModal.classList.add('active');
      progressModal.setAttribute('aria-hidden', 'false');
      progressSelect.focus();
    }

    function closeProgressModal() {
      activePlotId = null;
      progressModal.classList.remove('active');
      progressModal.setAttribute('aria-hidden', 'true');
    }

    function saveProgress() {
      if (!activePlotId) return;
      const plot = plots.find(p => p.id === activePlotId);
      if (!plot) return;
      const newProgress = parseInt(progressSelect.value);
      plot.progress = newProgress;

      tasks.forEach(t => {
        if(t.plotId === activePlotId) t.progress = newProgress;
      });
      saveTasks();
      renderTasks();
      renderPlots();
      closeProgressModal();
    }

    loginForm.addEventListener('submit', (e) => {
      e.preventDefault();
      const username = loginForm.username.value.trim();
      const password = loginForm.password.value.trim();

      const user = users.find(u => u.username === username && u.password === password);
      if (!user) {
        loginError.style.display = 'block';
        loginError.textContent = 'Usuário ou senha incorretos!';
        return;
      }
      loginError.style.display = 'none';
      currentUser = user;
      systemPanel.classList.add('active');
      loginForm.style.display = 'none';
      alert(`Bem-vindo, ${currentUser.username} (${currentUser.role})`);

      populatePlotOptions();
      loadTasks();
      renderTasks();
      renderPlots();
    });

    taskForm.addEventListener('submit', (e) => {
      e.preventDefault();
      if (!currentUser) return;

      const progressDefault = currentUser.role === 'Colaborador' ? 0 : 0;

      const taskType = taskForm.taskType.value;
      const plotId = taskForm.taskPlot.value;
      const responsible = taskForm.taskResponsible.value.trim();
      const deadline = taskForm.taskDeadline.value;
      const note = taskForm.taskNote.value.trim();

      if (!taskType || !plotId || !responsible || !deadline) {
        alert('Por favor, preencha todos os campos obrigatórios.');
        return;
      }
      const plot = plots.find(p => p.id === plotId);
      if (!plot) {
        alert('Quadra inválida.');
        return;
      }
      const plotName = plot.name;

      const taskData = {
        type: taskType,
        plotId,
        plotName,
        responsible,
        deadline,
        note,
        progress: progressDefault,
        createdBy: currentUser.username,
        createdAt: new Date().toISOString()
      };

      const editIndex = taskForm.dataset.editIndex;
      if (editIndex !== undefined) {
        if (!canEdit()) {
          alert('Você não tem permissão para editar tarefas.');
          clearTaskForm();
          return;
        }
        tasks[editIndex] = {...tasks[editIndex], ...taskData};
      } else {
        tasks.push(taskData);
      }

      saveTasks();
      renderTasks();
      updatePlotsProgress();
      clearTaskForm();
    });

    progressForm.addEventListener('submit', e => {
      e.preventDefault();
      saveProgress();
    });

    progressCancelButton.addEventListener('click', () => {
      closeProgressModal();
    });

    window.addEventListener('keydown', (e) => {
      if(e.key === 'Escape' && progressModal.classList.contains('active')) {
        closeProgressModal();
      }
    });

  })();
</script>

</body>
</html>

