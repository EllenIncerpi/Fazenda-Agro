<!DOCTYPE html>
<html lang="pt-BR">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>AgroTarefas - Gerenciamento de Quadras</title>
<style>
  @import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&display=swap');
  body {
    margin: 0; padding: 0; font-family: 'Montserrat', sans-serif;
    background: #f4f7f9;
    color: #333;
    display: flex;
    min-height: 100vh;
    flex-direction: column;
  }
  header {
    background: #2e7d32;
    color: white;
    padding: 1rem 1.5rem;
    text-align: center;
    font-weight: 700;
    font-size: 1.8rem;
    box-shadow: 0 4px 8px rgba(0,0,0,0.15);
  }
  main {
    flex: 1;
    display: flex;
    gap: 20px;
    padding: 1rem 1.5rem;
    max-width: 1200px;
    margin: auto;
    box-sizing: border-box;
  }
  section {
    background: white;
    border-radius: 8px;
    box-shadow: 0 3px 10px rgba(0,0,0,0.1);
    padding: 1rem 1.5rem;
    flex: 1;
    display: flex;
    flex-direction: column;
    max-height: 80vh;
    overflow: auto;
  }
  section h2 {
    margin-top: 0;
    margin-bottom: 1rem;
    border-bottom: 2px solid #2e7d32;
    padding-bottom: .4rem;
  }
  label {
    font-weight: 600;
    margin-top: 0.5rem;
    display: block;
  }
  input[type="text"],
  input[type="date"],
  select,
  textarea {
    width: 100%;
    padding: 8px 10px;
    margin-top: 4px;
    border-radius: 4px;
    border: 1px solid #ccc;
    font-size: 0.95rem;
    font-family: inherit;
    resize: vertical;
    box-sizing: border-box;
  }
  textarea {
    min-height: 60px;
  }
  button {
    margin-top: 1rem;
    background-color: #2e7d32;
    border: none;
    color: white;
    padding: 10px 16px;
    font-size: 1rem;
    font-weight: 700;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  button:hover:not(:disabled) {
    background-color: #1b4d21;
  }
  button:disabled {
    background-color: #9e9e9e;
    cursor: not-allowed;
  }
  /* Scrollbar for overflow */
  section::-webkit-scrollbar {
    width: 8px;
  }
  section::-webkit-scrollbar-thumb {
    background-color: rgba(46,125,50,0.4);
    border-radius: 4px;
  }
  /* Map styling */
  #map {
    border: 1px solid #ccc;
    border-radius: 8px;
    background: #eaf0ea;
    width: 100%;
    height: 320px;
    margin-top: 0.5rem;
  }
  .quadra {
    cursor: pointer;
    stroke: #666;
    stroke-width: 2;
    transition: fill 0.3s ease;
  }
  .quadra-label {
    pointer-events: none;
    font-weight: 700;
    font-size: 0.8rem;
  }
  /* List styling */
  ul.task-list {
    list-style: none;
    padding-left: 0;
    margin: 0;
  }
  ul.task-list li {
    border-bottom: 1px solid #eee;
    padding: 0.6rem 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  ul.task-list li:last-child {
    border-bottom: none;
  }
  span.progress-bar {
    display: inline-block;
    width: 80px;
    height: 14px;
    background: #ddd;
    border-radius: 7px;
    overflow: hidden;
    vertical-align: middle;
  }
  span.progress-bar-inner {
    display: block;
    height: 100%;
    background: #2e7d32;
    width: 0%;
    transition: width 0.5s ease;
  }
  /* User access styles */
  #user-info {
    background: #f9f9f9;
    border-radius: 5px;
    padding: 8px 10px;
    margin-bottom: 10px;
    font-size: 0.85rem;
    color: #444;
  }
  select.user-select {
    max-width: 160px;
    margin-left: 0.5rem;
  }
  /* Modal styles */
  #modal-overlay {
    display: none;
    position: fixed;
    top: 0; left: 0; right: 0; bottom: 0;
    background: rgba(0,0,0,0.5);
    z-index: 5000;
    justify-content: center;
    align-items: center;
  }
  #modal {
    background: white;
    padding: 1.5rem;
    border-radius: 8px;
    max-width: 320px;
    width: 90%;
    box-shadow: 0 5px 25px rgba(0,0,0,0.3);
  }
  #modal h3 {
    margin-top: 0;
    margin-bottom: 1rem;
    text-align: center;
  }
  #modal button {
    width: 100%;
  }
  #modal input[type="number"] {
    width: 100%;
    font-size: 1.2rem;
    padding: 8px 10px;
    margin-bottom: 1rem;
    box-sizing: border-box;
  }
</style>
</head>
<body>
<header>AgroTarefas - Gerenciamento de Quadras</header>
<main>
  <section id="task-creation">
    <h2>Cadastrar Nova Tarefa</h2>
    <div id="user-info">
      Usuário atual:
      <select id="user-select" class="user-select" aria-label="Selecionar Usuário"></select>
      <span id="user-role-info"></span>
    </div>
    <label for="task-name">Nome da Tarefa</label>
    <input id="task-name" type="text" placeholder="Ex: Desbrota, Pulverização" />

    <label for="task-quadras">Selecione as Quadras</label>
    <select id="task-quadras" multiple size="4" aria-label="Seleção de Quadras"></select>

    <label for="task-responsaveis">Responsáveis</label>
    <select id="task-responsaveis" multiple size="4" aria-label="Selecionar Responsáveis"></select>

    <label for="task-deadline">Prazo</label>
    <input id="task-deadline" type="date" />

    <label for="task-notes">Observações</label>
    <textarea id="task-notes" placeholder="Digite observações..."></textarea>

    <button id="btn-create-task" aria-label="Criar Tarefa">Criar Tarefa</button>
  </section>

  <section id="map-section">
    <h2>Mapa das Quadras</h2>
    <svg id="map" viewBox="0 0 500 300" aria-label="Mapa das Quadras" role="img" tabindex="0">
      <!-- Quadras serão desenhadas aqui -->
    </svg>
    <p style="font-size:0.9rem; margin-top:10px;">
      Clique em uma quadra no mapa para atualizar seu progresso na tarefa selecionada.
    </p>
    <label for="task-select-map">Selecione a Tarefa (para atualizar progresso)</label>
    <select id="task-select-map" aria-label="Selecionar Tarefa para mapa"></select>
  </section>

  <section id="task-list-section">
    <h2>Lista de Tarefas</h2>
    <ul id="task-list" class="task-list" aria-live="polite" aria-relevant="additions"></ul>
  </section>
</main>

<!-- Modal para atualizar progresso -->
<div id="modal-overlay" role="dialog" aria-modal="true" aria-labelledby="modal-title">
  <div id="modal">
    <h3 id="modal-title">Atualizar Progresso da Quadra</h3>
    <label for="progress-input">Progresso (%)</label>
    <input type="number" id="progress-input" min="0" max="100" step="1" aria-describedby="progress-desc" />
    <div id="progress-desc" style="font-size:0.8rem; color:#666; margin-bottom: 1rem;">Valor entre 0 e 100</div>
    <button id="modal-save-btn">Salvar</button>
    <button id="modal-cancel-btn" style="background:#aaa; margin-top:8px;">Cancelar</button>
  </div>
</div>

<script>
(() => {
  'use strict';

  // Simulação dos dados da fazenda e usuários
  const quadras = [
    { id: 'q1', nome: 'Quadra 1', coords: '40,20 160,20 160,90 40,90', progresso: {} },
    { id: 'q2', nome: 'Quadra 2', coords: '180,10 290,10 290,75 180,75', progresso: {} },
    { id: 'q3', nome: 'Quadra 3', coords: '40,110 160,110 160,190 40,190', progresso: {} },
    { id: 'q4', nome: 'Quadra 4', coords: '180,90 290,90 290,175 180,175', progresso: {} }
  ];

  const usuarios = [
    { id: 'u1', nome: 'Ana', nivel: 'administrador' },
    { id: 'u2', nome: 'Bruno', nivel: 'supervisor' },
    { id: 'u3', nome: 'Carlos', nivel: 'colaborador' }
  ];

  // Estado da aplicação
  let tarefas = JSON.parse(localStorage.getItem('agrotarefas_tarefas')) || [];
  let usuarioAtualId = localStorage.getItem('agrotarefas_usuarioAtual') || usuarios[0].id;

  // DOM elements
  const userSelect = document.getElementById('user-select');
  const userRoleInfo = document.getElementById('user-role-info');
  const taskNameInput = document.getElementById('task-name');
  const taskQuadrasSelect = document.getElementById('task-quadras');
  const taskResponsaveisSelect = document.getElementById('task-responsaveis');
  const taskDeadlineInput = document.getElementById('task-deadline');
  const taskNotesInput = document.getElementById('task-notes');
  const btnCreateTask = document.getElementById('btn-create-task');
  const taskListElem = document.getElementById('task-list');
  const mapSvg = document.getElementById('map');
  const taskSelectMap = document.getElementById('task-select-map');

  // Modal elements
  const modalOverlay = document.getElementById('modal-overlay');
  const progressInput = document.getElementById('progress-input');
  const modalSaveBtn = document.getElementById('modal-save-btn');
  const modalCancelBtn = document.getElementById('modal-cancel-btn');

  // Variáveis para controle de modal
  let modalTargetTaskId = null;
  let modalTargetQuadraId = null;

  // Funções auxiliares
  function salvarTarefas() {
    localStorage.setItem('agrotarefas_tarefas', JSON.stringify(tarefas));
  }

  function obterUsuarioAtual() {
    return usuarios.find(u => u.id === usuarioAtualId);
  }

  function podeCriarTarefa() {
    // Apenas admin e supervisor podem criar tarefa
    const nivel = obterUsuarioAtual().nivel;
    return nivel === 'administrador' || nivel === 'supervisor';
  }
  function podeAtualizarProgresso() {
    // admin e supervisor podem atualizar progresso, colaboradores só podem visualizar
    const nivel = obterUsuarioAtual().nivel;
    return nivel === 'administrador' || nivel === 'supervisor';
  }

  // Popula selects de quadras, usuários e tarefas
  function popularSelects() {
    // Quadras para cadastro
    taskQuadrasSelect.innerHTML = '';
    quadras.forEach(q => {
      const option = document.createElement('option');
      option.value = q.id;
      option.textContent = q.nome;
      taskQuadrasSelect.appendChild(option);
    });

    // Responsaveis para cadastro (usuarios)
    taskResponsaveisSelect.innerHTML = '';
    usuarios.forEach(u => {
      const option = document.createElement('option');
      option.value = u.id;
      option.textContent = `${u.nome} (${u.nivel})`;
      taskResponsaveisSelect.appendChild(option);
    });

    // Selecao de usuarios para simular login
    userSelect.innerHTML = '';
    usuarios.forEach(u => {
      const option = document.createElement('option');
      option.value = u.id;
      option.textContent = `${u.nome} (${u.nivel})`;
      userSelect.appendChild(option);
    });
    userSelect.value = usuarioAtualId;

    // Tarefas para map progress update
    atualizarSelectTarefasMapa();
  }

  function atualizarSelectTarefasMapa() {
    taskSelectMap.innerHTML = '';
    if(tarefas.length === 0) {
      const option = document.createElement('option');
      option.textContent = 'Nenhuma tarefa disponível';
      option.disabled = true;
      taskSelectMap.appendChild(option);
      return;
    }
    tarefas.forEach(t => {
      const option = document.createElement('option');
      option.value = t.id;
      option.textContent = t.nome + (t.prazo ? ` (Prazo: ${t.prazo})` : '');
      taskSelectMap.appendChild(option);
    });
    taskSelectMap.selectedIndex = 0;
  }

  // Atualiza exibição do usuário atual e permissões
  function atualizarInfoUsuario() {
    const usuario = obterUsuarioAtual();
    userRoleInfo.textContent = `| Nível: ${usuario.nivel.charAt(0).toUpperCase()}${usuario.nivel.slice(1)}`;
    // Enable or disable elements based on role
    btnCreateTask.disabled = !podeCriarTarefa();
    taskNameInput.disabled = !podeCriarTarefa();
    taskQuadrasSelect.disabled = !podeCriarTarefa();
    taskResponsaveisSelect.disabled = !podeCriarTarefa();
    taskDeadlineInput.disabled = !podeCriarTarefa();
    taskNotesInput.disabled = !podeCriarTarefa();
  }

  // Cria novo id
  function gerarId() {
    return 't' + Math.random().toString(16).slice(2);
  }

  // Cria a tarefa
  function criarTarefa() {
    const nome = taskNameInput.value.trim();
    const quadrasSelecionadas = Array.from(taskQuadrasSelect.selectedOptions).map(o => o.value);
    const responsaveisSelecionados = Array.from(taskResponsaveisSelect.selectedOptions).map(o => o.value);
    const prazo = taskDeadlineInput.value;
    const observacoes = taskNotesInput.value.trim();

    if (!nome) {
      alert('Por favor, informe o nome da tarefa.');
      return;
    }
    if (quadrasSelecionadas.length === 0) {
      alert('Por favor, selecione ao menos uma quadra.');
      return;
    }
    if (responsaveisSelecionados.length === 0) {
      alert('Por favor, selecione ao menos um responsável.');
      return;
    }

    const novaTarefa = {
      id: gerarId(),
      nome,
      quadras: quadrasSelecionadas,
      responsaveis: responsaveisSelecionados,
      prazo: prazo || null,
      observacoes,
      progresso: {}, // progresso por quadra (id quadra -> percentual)
      historico: [] // array de objetos {quadraId, usuarioId, progresso, data, observacoes}
    };

    tarefas.push(novaTarefa);
    salvarTarefas();

    // Limpar formulário
    taskNameInput.value = '';
    taskQuadrasSelect.selectedIndex = -1;
    taskResponsaveisSelect.selectedIndex = -1;
    taskDeadlineInput.value = '';
    taskNotesInput.value = '';

    atualizarListaTarefas();
    atualizarSelectTarefasMapa();
    desenharMapa();
    alert('Tarefa criada com sucesso!');
  }

  // Atualiza lista de tarefas
  function atualizarListaTarefas() {
    taskListElem.innerHTML = '';
    if (tarefas.length === 0) {
      const li = document.createElement('li');
      li.textContent = 'Nenhuma tarefa cadastrada.';
      taskListElem.appendChild(li);
      return;
    }
    tarefas.forEach(t => {
      const li = document.createElement('li');
      const nomeSpan = document.createElement('span');
      nomeSpan.textContent = t.nome;
      nomeSpan.style.fontWeight = '700';
      const progressoSpan = document.createElement('span');
      progressoSpan.classList.add('progress-bar');
      const innerBar = document.createElement('span');
      innerBar.classList.add('progress-bar-inner');

      // Calcula progresso médio da tarefa (média dos progressos das quadras)
      const quadras = t.quadras;
      let soma = 0;
      let contador = 0;
      quadras.forEach(qid => {
        const p = t.progresso[qid];
        if(typeof p === 'number') {
          soma += p;
          contador++;
        }
      });
      const media = contador > 0 ? Math.round(soma / contador) : 0;
      innerBar.style.width = media + '%';
      progressoSpan.appendChild(innerBar);

      li.appendChild(nomeSpan);
      li.appendChild(progressoSpan);

      taskListElem.appendChild(li);
    });
  }

  // Desenha o mapa das quadras
  function desenharMapa() {
    // Limpa SVG
    while (mapSvg.firstChild) {
      mapSvg.removeChild(mapSvg.firstChild);
    }

    const tarefaSelecionadaId = taskSelectMap.value;
    const tarefaSelecionada = tarefas.find(t => t.id === tarefaSelecionadaId);

    quadras.forEach(q => {
      const progressoQuadra = tarefaSelecionada?.progresso[q.id] ?? 0;
      let fillColor = '#9e9e9e'; // cinza 0%
      if (progressoQuadra >= 100) fillColor = '#2e7d32'; // verde 100%
      else if (progressoQuadra >= 50) fillColor = '#fb8c00'; // laranja 50%
      else if (progressoQuadra > 0) fillColor = '#b0b0b0'; // cinza claro <50%
      
      const polygon = document.createElementNS('http://www.w3.org/2000/svg', 'polygon');
      polygon.setAttribute('points', q.coords);
      polygon.setAttribute('class', 'quadra');
      polygon.setAttribute('fill', fillColor);
      polygon.setAttribute('tabindex', '0');
      polygon.setAttribute('role', 'button');
      polygon.setAttribute('aria-label', `${q.nome}, progresso ${progressoQuadra}% na tarefa ${tarefaSelecionada? tarefaSelecionada.nome: 'Nenhuma'}`);
      polygon.dataset.quadraId = q.id;

      polygon.addEventListener('click', onClickQuadra);
      polygon.addEventListener('keydown', e => {
        if(e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          onClickQuadra(e);
        }
      });

      mapSvg.appendChild(polygon);
      // Label text
      const centroid = getCentroid(q.coords);
      const text = document.createElementNS('http://www.w3.org/2000/svg', 'text');
      text.setAttribute('x', centroid.x);
      text.setAttribute('y', centroid.y);
      text.setAttribute('class', 'quadra-label');
      text.setAttribute('text-anchor', 'middle');
      text.setAttribute('alignment-baseline', 'middle');
      text.textContent = q.nome;
      mapSvg.appendChild(text);
    });
  }

  // Calcula centroide simples (média dos pontos)
  function getCentroid(pointsStr) {
    const points = pointsStr.trim().split(' ').map(p => {
      const [x, y] = p.split(',').map(Number);
      return { x, y };
    });
    const len = points.length;
    let sumX = 0, sumY = 0;
    points.forEach(p => { sumX += p.x; sumY += p.y; });
    return { x: sumX / len, y: sumY / len };
  }

  // Evento clique na quadra para atualizar progresso
  function onClickQuadra(event) {
    if(!podeAtualizarProgresso()) {
      alert('Você não tem permissão para atualizar o progresso.');
      return;
    }
    const quadraId = event.target.dataset.quadraId;
    const tarefaId = taskSelectMap.value;
    if (!tarefaId) {
      alert('Selecione uma tarefa para atualizar o progresso.');
      return;
    }
    modalTargetQuadraId = quadraId;
    modalTargetTaskId = tarefaId;
    const tarefa = tarefas.find(t => t.id === tarefaId);
    const progressoAtual = tarefa.progresso[quadraId] || 0;
    progressInput.value = progressoAtual;
    modalOverlay.style.display = 'flex';
    progressInput.focus();
  }

  // Salvar progresso do modal
  function salvarProgressoModal() {
    const valor = parseInt(progressInput.value);
    if (isNaN(valor) || valor < 0 || valor > 100) {
      alert('Digite um valor válido entre 0 e 100.');
      return;
    }
    const tarefa = tarefas.find(t => t.id === modalTargetTaskId);
    if (!tarefa) {
      alert('Tarefa não encontrada.');
      fecharModal();
      return;
    }
    // Atualizar progresso na tarefa para a quadra
    tarefa.progresso[modalTargetQuadraId] = valor;

    // Salvar histórico com informações
    tarefa.historico.push({
      quadraId: modalTargetQuadraId,
      usuarioId: usuarioAtualId,
      progresso: valor,
      data: new Date().toISOString(),
      observacoes: null
    });

    salvarTarefas();
    atualizarListaTarefas();
    desenharMapa();
    fecharModal();
  }

  // Fecha o modal
  function fecharModal() {
    modalOverlay.style.display = 'none';
    progressInput.value = '';
    modalTargetQuadraId = null;
    modalTargetTaskId = null;
  }

  // Evento mudar usuário (simula login)
  function onChangeUsuario() {
    usuarioAtualId = userSelect.value;
    localStorage.setItem('agrotarefas_usuarioAtual', usuarioAtualId);
    atualizarInfoUsuario();
  }

  // Eventos
  btnCreateTask.addEventListener('click', () => {
    if(!podeCriarTarefa()) {
      alert('Você não tem permissão para criar tarefas.');
      return;
    }
    criarTarefa();
  });
  userSelect.addEventListener('change', onChangeUsuario);
  modalSaveBtn.addEventListener('click', salvarProgressoModal);
  modalCancelBtn.addEventListener('click', fecharModal);
  modalOverlay.addEventListener('click', (e) => {
    if(e.target === modalOverlay) fecharModal();
  });

  taskSelectMap.addEventListener('change', () => {
    desenharMapa();
  });

  // Inicialização
  function init() {
    popularSelects();
    atualizarInfoUsuario();
    atualizarListaTarefas();
    desenharMapa();
  }
  init();

})();
</script>
</body>
</html>
